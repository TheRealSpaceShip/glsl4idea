/*
 *     Copyright 2010 Jean-Paul Balabanian and Yngve Devik Hammersland
 *
 *     This file is part of glsl4idea.
 *
 *     Glsl4idea is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as
 *     published by the Free Software Foundation, either version 3 of
 *     the License, or (at your option) any later version.
 *
 *     Glsl4idea is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with glsl4idea.  If not, see <http://www.gnu.org/licenses/>.
 */

/* The following code was generated by JFlex 1.4.3 on 24.11.10 19:33 */

package glslplugin.lang.scanner;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static glslplugin.lang.elements.GLSLTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24.11.10 19:33 from the specification file
 * <tt>D:/Prog/IntelliJ IDEA plugins/glslplugin/src/glslplugin/lang/scanner/GLSL.jflex</tt>
 */
class GLSLFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\15\1\0\1\5\1\15\22\0\1\5\1\67\1\0"+
    "\1\77\2\0\1\70\1\0\1\61\1\62\1\16\1\64\1\76\1\13"+
    "\1\11\1\14\1\6\1\44\1\36\1\37\1\40\3\2\2\1\1\74"+
    "\1\75\1\65\1\63\1\66\1\73\1\0\2\3\1\46\1\45\1\12"+
    "\1\10\14\4\1\47\4\4\1\7\2\4\1\57\1\0\1\60\1\72"+
    "\1\4\1\0\1\24\1\34\1\35\1\32\1\22\1\23\1\53\1\50"+
    "\1\31\1\4\1\54\1\25\1\41\1\33\1\30\1\43\1\4\1\20"+
    "\1\26\1\17\1\21\1\27\1\51\1\42\1\52\1\4\1\55\1\71"+
    "\1\56\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\17\3\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\3\1\1\24"+
    "\1\25\1\26\1\27\1\30\4\31\2\2\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\16\3\1\40\1\3\1\41"+
    "\1\42\10\3\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\4\30\1\31\1\0\6\3\1\54"+
    "\6\3\1\55\1\3\1\56\12\3\3\30\1\35\1\57"+
    "\2\3\1\60\4\3\1\61\1\62\1\63\1\3\1\64"+
    "\6\3\1\65\3\3\1\66\1\67\1\70\1\3\3\30"+
    "\2\3\1\71\4\3\1\72\1\73\1\74\1\3\1\75"+
    "\1\3\1\76\1\77\1\100\1\101\2\3\1\102\3\3"+
    "\1\103\3\30\1\104\2\3\1\105\6\3\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\3\30"+
    "\1\117\2\3\1\120\1\3\1\121\2\3\2\30\1\122"+
    "\6\3\1\123\1\124\1\30\1\125\1\126\1\127\1\130"+
    "\1\131\1\3\1\132\1\30\3\3\1\133\2\3\1\134"+
    "\6\3\1\135\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\100\0\100\0\100\0\100\0\100\0\100\0\u0640"+
    "\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\100"+
    "\0\100\0\100\0\100\0\u0840\0\100\0\u0880\0\u08c0\0\u0900"+
    "\0\u0940\0\u0980\0\100\0\100\0\u09c0\0\u0a00\0\100\0\100"+
    "\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\300\0\u0dc0"+
    "\0\u0e00\0\300\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80"+
    "\0\u0fc0\0\u1000\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\300"+
    "\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\300\0\u14c0"+
    "\0\300\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680"+
    "\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\100\0\300"+
    "\0\u1840\0\u1880\0\300\0\u18c0\0\u1900\0\u1940\0\u1980\0\300"+
    "\0\300\0\300\0\u19c0\0\300\0\u1a00\0\u1a40\0\u1a80\0\u1ac0"+
    "\0\u1b00\0\u1b40\0\300\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80"+
    "\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\300"+
    "\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\300\0\300\0\300\0\u1f80"+
    "\0\300\0\u1fc0\0\300\0\300\0\300\0\300\0\u2000\0\u2040"+
    "\0\300\0\u2080\0\u20c0\0\u2100\0\300\0\u2140\0\u2180\0\u21c0"+
    "\0\300\0\u2200\0\u2240\0\300\0\u2280\0\u22c0\0\u2300\0\u2340"+
    "\0\u2380\0\u23c0\0\300\0\300\0\300\0\300\0\300\0\300"+
    "\0\300\0\300\0\300\0\u2400\0\u2440\0\u2480\0\300\0\u24c0"+
    "\0\u2500\0\300\0\u2540\0\300\0\u2580\0\u25c0\0\u2600\0\u2640"+
    "\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\300"+
    "\0\300\0\u2840\0\u2880\0\300\0\u28c0\0\300\0\u2900\0\u2940"+
    "\0\300\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00"+
    "\0\300\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\300"+
    "\0\300";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\2\4\1\5\1\6\2\4\1\7\1\4"+
    "\1\10\1\11\1\5\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\4\1\21\1\22\1\23\1\24\1\25"+
    "\1\4\1\26\1\27\3\3\1\30\2\4\1\3\4\4"+
    "\1\31\3\4\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\101\0\2\3\3\0"+
    "\1\3\1\0\1\55\1\56\1\57\7\0\1\57\1\55"+
    "\12\0\3\3\3\0\1\3\34\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\36\4\30\0\1\5\7\0\1\5"+
    "\63\0\1\60\1\61\3\0\1\61\1\62\1\55\1\56"+
    "\1\57\7\0\1\57\1\55\12\0\3\61\1\0\1\62"+
    "\1\0\1\61\34\0\2\56\3\0\1\56\27\0\3\56"+
    "\3\0\1\56\46\0\1\63\47\0\1\64\30\0\1\65"+
    "\1\0\1\66\44\0\1\67\77\0\1\70\15\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\1\4\1\71\34\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\3\4"+
    "\1\72\32\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\14\4\1\73\21\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\6\4\1\74\27\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\5\4\1\75\1\76"+
    "\2\4\1\77\24\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\1\100\35\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\1\101\4\4\1\102\30\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\3\4\1\103"+
    "\1\4\1\104\3\4\1\105\24\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\2\4\1\106\33\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\4\4\1\107"+
    "\3\4\1\110\3\4\1\111\21\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\11\4\1\112\1\113\23\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\1\4"+
    "\1\114\6\4\1\115\1\116\24\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\3\4\1\117\5\4\1\120"+
    "\24\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\5\4\1\121\30\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\31\4\1\122\4\4\106\0\1\123\77\0"+
    "\1\124\1\125\76\0\1\126\77\0\1\127\77\0\1\130"+
    "\104\0\1\131\100\0\1\132\100\0\1\133\5\0\5\134"+
    "\1\54\7\134\1\54\4\134\1\135\4\134\1\136\13\134"+
    "\1\137\34\134\1\0\2\56\3\0\1\56\1\0\1\55"+
    "\1\0\1\57\7\0\1\57\1\55\12\0\3\56\3\0"+
    "\1\56\34\0\2\140\3\0\1\140\1\0\1\55\2\0"+
    "\1\140\7\0\1\55\12\0\3\140\3\0\1\140\17\0"+
    "\1\140\14\0\2\60\3\0\1\60\1\0\1\55\1\56"+
    "\1\57\7\0\1\57\1\55\12\0\3\60\3\0\1\60"+
    "\34\0\1\60\1\61\3\0\1\61\1\0\1\55\1\56"+
    "\1\57\7\0\1\57\1\55\12\0\3\61\3\0\1\61"+
    "\34\0\3\62\2\0\1\62\1\0\1\62\1\0\1\62"+
    "\7\0\3\62\5\0\1\62\1\0\5\62\3\0\3\62"+
    "\31\0\15\65\1\0\62\65\16\66\1\141\61\66\1\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\2\4\1\142"+
    "\33\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\1\143\35\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\12\4\1\144\23\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\7\4\1\145\26\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\6\4\1\146\27\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\11\4"+
    "\1\147\24\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\1\4\1\150\34\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\1\151\35\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\1\4\1\152\34\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\22\4\1\153"+
    "\13\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\16\4\1\154\17\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\1\4\1\155\34\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\12\4\1\156\23\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\1\157\35\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\3\4"+
    "\1\160\32\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\1\161\7\4\1\162\1\163\24\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\7\4\1\164\26\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\3\4"+
    "\1\165\32\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\3\4\1\166\32\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\11\4\1\167\24\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\14\4\1\170\21\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\14\4"+
    "\1\171\21\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\1\172\35\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\12\4\1\173\23\4\23\0\15\134\1\0"+
    "\77\134\1\0\24\134\1\174\52\134\1\0\4\134\1\175"+
    "\72\134\1\0\2\134\1\176\57\134\1\0\2\140\3\0"+
    "\1\140\1\0\1\55\12\0\1\55\12\0\3\140\3\0"+
    "\1\140\33\0\14\66\1\177\1\66\1\141\61\66\1\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\3\4\1\200"+
    "\32\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\2\4\1\201\33\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\4\4\1\202\31\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\3\4\1\203\32\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\7\4\1\142"+
    "\26\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\5\4\1\204\30\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\1\4\1\205\34\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\2\4\1\206\33\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\24\4\1\207"+
    "\11\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\17\4\1\210\1\211\1\212\14\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\33\4\1\213\2\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\13\4\1\214"+
    "\22\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\16\4\1\215\17\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\5\4\1\216\30\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\2\4\1\217\33\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\16\4\1\220"+
    "\17\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\5\4\1\221\30\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\16\4\1\222\17\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\6\4\1\223\27\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\1\224\35\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\1\225"+
    "\6\4\1\226\26\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\17\4\1\227\1\230\1\231\14\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\6\4\1\232"+
    "\27\4\23\0\15\134\1\0\1\134\1\233\75\134\1\0"+
    "\2\134\1\234\74\134\1\0\6\134\1\235\53\134\1\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\1\4\1\236"+
    "\34\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\11\4\1\237\24\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\1\240\35\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\12\4\1\241\23\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\16\4\1\242\17\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\6\4"+
    "\1\243\27\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\12\4\1\244\23\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\17\4\1\245\1\246\1\247\14\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\1\4"+
    "\1\250\34\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\1\251\35\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\5\4\1\252\30\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\35\4\1\253\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\17\4\1\254\1\255"+
    "\1\256\14\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\1\4\1\257\34\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\12\4\1\260\23\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\1\261\35\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\23\4\1\262"+
    "\12\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\23\4\1\263\12\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\23\4\1\264\12\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\3\4\1\265\32\4\23\0"+
    "\15\134\1\0\4\134\1\266\72\134\1\0\10\134\1\267"+
    "\66\134\1\0\35\134\1\270\24\134\1\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\14\4\1\271\21\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\1\4\1\272"+
    "\34\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\15\4\1\273\20\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\1\274\35\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\3\4\1\275\32\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\14\4\1\276\21\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\12\4"+
    "\1\277\23\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\1\4\1\300\34\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\11\4\1\301\24\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\14\4\1\302\21\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\17\4"+
    "\1\303\1\304\1\305\14\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\17\4\1\306\1\307\1\310\14\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\17\4"+
    "\1\311\1\312\1\313\14\4\23\0\15\134\1\0\15\134"+
    "\1\314\61\134\1\0\13\134\1\315\63\134\1\0\23\134"+
    "\1\316\36\134\1\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\22\4\1\317\13\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\2\4\1\320\33\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\1\4\1\321\34\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\34\4"+
    "\1\322\1\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\5\4\1\323\30\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\13\4\1\324\22\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\12\4\1\325\23\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\2\4"+
    "\1\326\33\4\23\0\15\134\1\0\10\134\1\327\66\134"+
    "\1\0\12\134\1\330\64\134\1\0\6\134\1\331\53\134"+
    "\1\0\4\4\1\0\3\4\1\0\1\4\4\0\1\332"+
    "\35\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\17\4\1\333\1\334\4\4\1\335\1\4\1\336\6\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\14\4"+
    "\1\337\21\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\13\4\1\340\22\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\3\4\1\341\32\4\23\0\15\134"+
    "\1\0\13\134\1\342\63\134\1\0\15\134\1\343\44\134"+
    "\15\331\1\0\62\331\1\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\3\4\1\344\32\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\26\4\1\345\7\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\26\4\1\346"+
    "\7\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\26\4\1\347\7\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\2\4\1\350\33\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\1\351\35\4\23\0\15\134"+
    "\1\0\12\134\1\352\47\134\15\343\1\0\62\343\1\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\30\4\1\353"+
    "\5\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\30\4\1\354\5\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\15\4\1\355\20\4\23\0\15\134\1\0"+
    "\15\134\1\356\44\134\1\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\31\4\1\357\4\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\31\4\1\360\4\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\3\4\1\361"+
    "\32\4\23\0\15\356\1\0\62\356\1\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\5\4\1\362\30\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\5\4\1\363"+
    "\30\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\13\4\1\364\22\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\13\4\1\365\22\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\11\4\1\366\24\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\11\4\1\367"+
    "\24\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\32\4\1\370\3\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\32\4\1\371\3\4\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11456];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\6\11\10\1\4\11\1\1\1\11"+
    "\5\1\2\11\2\1\2\11\32\1\11\11\5\1\1\0"+
    "\35\1\1\11\172\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


  GLSLFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  GLSLFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return IDENTIFIER;
          }
        case 95: break;
        case 87: 
          { return SAMPLER2D_TYPE;
          }
        case 96: break;
        case 60: 
          { return IVEC4_TYPE;
          }
        case 97: break;
        case 80: 
          { return VARYING_KEYWORD;
          }
        case 98: break;
        case 26: 
          { return DEC_OP;
          }
        case 99: break;
        case 33: 
          { return IN_KEYWORD;
          }
        case 100: break;
        case 29: 
          { return COMMENT_BLOCK;
          }
        case 101: break;
        case 20: 
          { return QUESTION;
          }
        case 102: break;
        case 15: 
          { return EQUAL;
          }
        case 103: break;
        case 51: 
          { return VEC4_TYPE;
          }
        case 104: break;
        case 74: 
          { return MAT3X3_TYPE;
          }
        case 105: break;
        case 17: 
          { return LEFT_ANGLE;
          }
        case 106: break;
        case 21: 
          { return COLON;
          }
        case 107: break;
        case 59: 
          { return IVEC3_TYPE;
          }
        case 108: break;
        case 83: 
          { return CENTROID_KEYWORD;
          }
        case 109: break;
        case 45: 
          { return OUT_KEYWORD;
          }
        case 110: break;
        case 81: 
          { return DISCARD_JUMP_STATEMENT;
          }
        case 111: break;
        case 73: 
          { return MAT3X2_TYPE;
          }
        case 112: break;
        case 66: 
          { return CONST_KEYWORD;
          }
        case 113: break;
        case 65: 
          { return BVEC4_TYPE;
          }
        case 114: break;
        case 6: 
          { return DASH;
          }
        case 115: break;
        case 43: 
          { return XOR_OP;
          }
        case 116: break;
        case 35: 
          { return EQ_OP;
          }
        case 117: break;
        case 2: 
          { return INTEGER_CONSTANT;
          }
        case 118: break;
        case 84: 
          { return CONTINUE_JUMP_STATEMENT;
          }
        case 119: break;
        case 12: 
          { return RIGHT_BRACKET;
          }
        case 120: break;
        case 10: 
          { return RIGHT_BRACE;
          }
        case 121: break;
        case 22: 
          { return SEMICOLON;
          }
        case 122: break;
        case 62: 
          { return BREAK_JUMP_STATEMENT;
          }
        case 123: break;
        case 78: 
          { return MAT4X4_TYPE;
          }
        case 124: break;
        case 23: 
          { return COMMA;
          }
        case 125: break;
        case 50: 
          { return VEC3_TYPE;
          }
        case 126: break;
        case 86: 
          { return ATTRIBUTE_KEYWORD;
          }
        case 127: break;
        case 36: 
          { return ADD_ASSIGN;
          }
        case 128: break;
        case 72: 
          { return MAT2X4_TYPE;
          }
        case 129: break;
        case 69: 
          { return STRUCT;
          }
        case 130: break;
        case 56: 
          { return MAT4_TYPE;
          }
        case 131: break;
        case 58: 
          { return IVEC2_TYPE;
          }
        case 132: break;
        case 16: 
          { return PLUS;
          }
        case 133: break;
        case 25: 
          { return FLOAT_CONSTANT;
          }
        case 134: break;
        case 88: 
          { return SAMPLER3D_TYPE;
          }
        case 135: break;
        case 49: 
          { return VEC2_TYPE;
          }
        case 136: break;
        case 92: 
          { return SAMPLERCUBE_TYPE;
          }
        case 137: break;
        case 64: 
          { return BVEC3_TYPE;
          }
        case 138: break;
        case 90: 
          { return INVARIANT_KEYWORD;
          }
        case 139: break;
        case 5: 
          { return DOT;
          }
        case 140: break;
        case 27: 
          { return SUB_ASSIGN;
          }
        case 141: break;
        case 53: 
          { return BOOL_TYPE;
          }
        case 142: break;
        case 57: 
          { return FLOAT_TYPE;
          }
        case 143: break;
        case 44: 
          { return FOR_KEYWORD;
          }
        case 144: break;
        case 37: 
          { return INC_OP;
          }
        case 145: break;
        case 89: 
          { return SAMPLER1D_TYPE;
          }
        case 146: break;
        case 77: 
          { return MAT4X3_TYPE;
          }
        case 147: break;
        case 24: 
          { return COMPILER_DIRECTIVE_OTHER;
          }
        case 148: break;
        case 47: 
          { return BOOL_CONSTANT;
          }
        case 149: break;
        case 1: 
          { return UNKNOWN;
          }
        case 150: break;
        case 38: 
          { return LE_OP;
          }
        case 151: break;
        case 30: 
          { return DIV_ASSIGN;
          }
        case 152: break;
        case 34: 
          { return DO_KEYWORD;
          }
        case 153: break;
        case 71: 
          { return MAT2X3_TYPE;
          }
        case 154: break;
        case 63: 
          { return BVEC2_TYPE;
          }
        case 155: break;
        case 48: 
          { return ELSE_KEYWORD;
          }
        case 156: break;
        case 42: 
          { return OR_OP;
          }
        case 157: break;
        case 14: 
          { return RIGHT_PAREN;
          }
        case 158: break;
        case 9: 
          { return LEFT_BRACE;
          }
        case 159: break;
        case 55: 
          { return MAT3_TYPE;
          }
        case 160: break;
        case 79: 
          { return UNIFORM_KEYWORD;
          }
        case 161: break;
        case 93: 
          { return SAMPLER2DSHADOW_TYPE;
          }
        case 162: break;
        case 76: 
          { return MAT4X2_TYPE;
          }
        case 163: break;
        case 52: 
          { return VOID_TYPE;
          }
        case 164: break;
        case 70: 
          { return MAT2X2_TYPE;
          }
        case 165: break;
        case 28: 
          { return COMMENT_LINE;
          }
        case 166: break;
        case 54: 
          { return MAT2_TYPE;
          }
        case 167: break;
        case 41: 
          { return AND_OP;
          }
        case 168: break;
        case 18: 
          { return RIGHT_ANGLE;
          }
        case 169: break;
        case 7: 
          { return SLASH;
          }
        case 170: break;
        case 32: 
          { return IF_KEYWORD;
          }
        case 171: break;
        case 4: 
          { return WHITE_SPACE;
          }
        case 172: break;
        case 61: 
          { return INOUT_KEYWORD;
          }
        case 173: break;
        case 31: 
          { return MUL_ASSIGN;
          }
        case 174: break;
        case 67: 
          { return WHILE_KEYWORD;
          }
        case 175: break;
        case 39: 
          { return GE_OP;
          }
        case 176: break;
        case 91: 
          { return COMPILER_DIRECTIVE_EXTENSION;
          }
        case 177: break;
        case 13: 
          { return LEFT_PAREN;
          }
        case 178: break;
        case 75: 
          { return MAT3X4_TYPE;
          }
        case 179: break;
        case 8: 
          { return STAR;
          }
        case 180: break;
        case 82: 
          { return COMPILER_DIRECTIVE_PRAGMA;
          }
        case 181: break;
        case 85: 
          { return COMPILER_DIRECTIVE_VERSION;
          }
        case 182: break;
        case 94: 
          { return SAMPLER1DSHADOW_TYPE;
          }
        case 183: break;
        case 40: 
          { return NE_OP;
          }
        case 184: break;
        case 19: 
          { return BANG;
          }
        case 185: break;
        case 11: 
          { return LEFT_BRACKET;
          }
        case 186: break;
        case 68: 
          { return RETURN_JUMP_STATEMENT;
          }
        case 187: break;
        case 46: 
          { return INT_TYPE;
          }
        case 188: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
